// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;

///<<< END WRITING YOUR CODE

public class CharacterAgent : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE CharacterAgent
///<<< END WRITING YOUR CODE
{
	private uint m_CurTargetId = 0;
	public void _set_m_CurTargetId(uint value)
	{
		m_CurTargetId = value;
	}
	public uint _get_m_CurTargetId()
	{
		return m_CurTargetId;
	}

	private uint m_ExternalTargetId = 0;
	public void _set_m_ExternalTargetId(uint value)
	{
		m_ExternalTargetId = value;
	}
	public uint _get_m_ExternalTargetId()
	{
		return m_ExternalTargetId;
	}

	public bool CanUseSkill()
	{
///<<< BEGIN WRITING YOUR CODE CanUseSkill
        return !IsSkillActivite() && !IsBuffActivite();
        ///<<< END WRITING YOUR CODE
	}

	public float DistanceToTarget()
	{
///<<< BEGIN WRITING YOUR CODE DistanceToTarget
        var target = GetTargetEntity();
        var self = GetOwner();

        if (null == target)
            return float.MaxValue;

        return ExtensionUnityVector3.DistanceXZ(self.position.Value, target.position.Value);
        ///<<< END WRITING YOUR CODE
	}

	public void EscapeFromTarget()
	{
///<<< BEGIN WRITING YOUR CODE EscapeFromTarget
        if (IsSkillActivite() || IsBuffActivite())
            return;

        var target = GetTargetEntity();
        var self = GetOwner();

        if (null == target)
            return;

        Vector3 direction = self.position.Value - target.position.Value;
        direction.y = 0;
        self.ReplaceRotation(direction.ToDir());
        ///<<< END WRITING YOUR CODE
	}

	public void FaceToTarget()
	{
///<<< BEGIN WRITING YOUR CODE FaceToTarget
        var target = GetTargetEntity();
        var self = GetOwner();

        if (IsSkillActivite() || IsBuffActivite())
            return;

        if (null == target)
            return;

        Vector3 direction = target.position.Value - self.position.Value;
        self.ReplaceRotation(direction.ToDir());
        ///<<< END WRITING YOUR CODE
	}

	public behaviac.EBTStatus MoveToTarget()
	{
///<<< BEGIN WRITING YOUR CODE MoveToTarget

        if (IsSkillActivite() || IsBuffActivite())
            return behaviac.EBTStatus.BT_SUCCESS;

        var target = GetTargetEntity();
        var self = GetOwner();

        if (null == target)
            return behaviac.EBTStatus.BT_SUCCESS;

        Vector3 direction = target.position.Value - self.position.Value;
        direction.y = 0;
        self.ReplaceRotation(direction.ToDir());

		return behaviac.EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
	}

	public void PlayAnimation(string animName)
	{
///<<< BEGIN WRITING YOUR CODE PlayAnimation

        var self = GetOwner();

        UnityClient.Services.Instance.ViewService.PlayAnimation(self, animName);
///<<< END WRITING YOUR CODE
	}

	public void StopMove()
	{
///<<< BEGIN WRITING YOUR CODE StopMove
        {
            var self = GetOwner();
            self.ReplaceMovement(Vector3.zero);
        }
///<<< END WRITING YOUR CODE
	}

	public uint TryFindTarget()
	{
///<<< BEGIN WRITING YOUR CODE TryFindTarget
        var entities = Contexts.sharedInstance.game.GetGroup(GameMatcher.AllOf(GameMatcher.Position, GameMatcher.Camp, GameMatcher.Id)).GetEntities();
        GameEntity self = GetOwner();
        foreach(var entity in entities)
        {
            if (entity.camp.Value != self.camp.Value && ExtensionUnityVector3.DistanceXZ(self.position.Value, entity.position.Value) < 10)
                return entity.id.value;
        }
		return 0;
///<<< END WRITING YOUR CODE
	}

	public void UseSkill(int SkillId)
	{
///<<< BEGIN WRITING YOUR CODE UseSkill
        GameEntity self = GetOwner();
        if (!CanUseSkill())
            return;
        UnityClient.SkillSystem.Instance.StartSkill(self, self, SkillId, -1, self.position.Value, self.rotation.Value);
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

        public void Init(uint id)
    {
        m_EntityId = id;
    }
    private GameEntity GetOwner()
    {
        return Contexts.sharedInstance.game.GetEntityWithId(m_EntityId);
    }
    private bool IsSkillActivite()
    {
        GameEntity self = GetOwner();
        return self.hasSkill && null != self.skill.Instance;
    }
    private bool IsBuffActivite()
    {
        GameEntity self = GetOwner();
        foreach(var pair in self.buff.InstanceInfos)
        {
            if (pair.Value.Count > 0)
                return true;
        }
        return false;
    }
    private GameEntity GetTargetEntity()
    {
        return Contexts.sharedInstance.game.GetEntityWithId(m_CurTargetId);
    }
    private uint m_EntityId;

///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

